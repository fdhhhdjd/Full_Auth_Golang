version: "3.8"

services:
  # TODO: POSTGRESQL
  postgresql:
    container_name: postgresql
    # Image version PG
    image: postgres:latest
    # Not restart when db crashes
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB}" # Database name from environment variable
      POSTGRES_USER: "${POSTGRES_USER}" # Username from environment variable
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}" # Password from environment variable
      PGDATA: "/data/postgres" # Location of the PostgreSQL data files
    volumes:
      - db_data/:/var/lib/postgresql/data/postgres:ro # Mount a volume for database data in read-only mode
      - ./migrations:/docker-entrypoint-initdb.d # Initial SQL script for database setup
    env_file:
      - .env # Load environment variables from .env file
    ports:
      - "${POSTGRES_PORT_MAPPING}:${POSTGRES_PORT}" # Map the container port to the host port
    networks:
      - service_auth-network # Connect to the custom network
    healthcheck:
      test: [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'", # Check if PostgreSQL is ready
        ]
      interval: 10s # Interval between health checks
      timeout: 3s # Health check timeout
      retries: 3 # Number of retries before marking the service as unhealthy

  # TODO: GO
  # App Service
  service_auth:
    # Name container
    container_name: service_auth
    # Configuration for building the docker image for the service
    restart: unless-stopped
    # Image production
    image: nguyentientai/go-secure-auth-pro:lastest
    # Load environment variables from .env file
    env_file:
      - .env
    environment:
      ENV: "pro" # Port for the service
    ports:
      - "${PORT}:${PORT}" # Map the container port to the host port
    depends_on:
      - postgresql # This service depends on PostgreSQL. Start PostgreSQL first.
    networks:
      - service_auth-network # Connect to the custom network
    healthcheck:
      test: [
          "CMD",
          "sh",
          "-c",
          "curl -sSf http://${HOST}:${PORT}/ping > /dev/null",
        ] # Health check to verify the app is running
      interval: 60s # Interval between health checks
      timeout: 2s # Health check timeout
      retries: 3 # Number of retries before marking the service as unhealthy

  # TODO: CRON JOB
  # Defines a cron service that runs scheduled tasks
  service_cron:
    container_name: service_cron
    restart: unless-stopped
    image: nguyentientai/go_cronjob_auth:lastest
    env_file:
      - .env
    depends_on:
      - postgresql
    networks:
      - service_auth-network

# Use local driver for the volume
volumes:
  db_data:
    driver: local

# Use bridge network driver
networks:
  service_auth-network:
    driver: bridge
